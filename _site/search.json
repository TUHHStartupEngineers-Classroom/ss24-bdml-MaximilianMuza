[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My PBL Journal",
    "section": "",
    "text": "This is my PBL journal for journaling this course’s challenges. In total there are six challenges all regarding ML applied to business data science."
  },
  {
    "objectID": "index.html#challenges",
    "href": "index.html#challenges",
    "title": "My PBL Journal",
    "section": "Challenges",
    "text": "Challenges\n\nMachine Learning Fundamentals\nSupervised ML Regression\nAutomated ML with H20 (I)\nAutomated ML with H20 (II)\nPerformance Measures\nBlack-Box Models with LIME"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html",
    "href": "content/01_journal/02_supervised_ml_regression.html",
    "title": "02 Supervised Machine Learning Regression",
    "section": "",
    "text": "Load the absolute path to the data directory.\ndata_dir &lt;- params$data_dir"
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html#stock-prices-standardization",
    "href": "content/01_journal/02_supervised_ml_regression.html#stock-prices-standardization",
    "title": "02 Supervised Machine Learning Regression",
    "section": "\n2.1 Stock Prices Standardization",
    "text": "2.1 Stock Prices Standardization\nStock prices (adjusted stock price) are standardized by converting them into daily returns (percent change from previous day). This is done such that the stock prices are of the same magnitude and can thus be compared. Below is the sp 500 price table shown:\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  filter(date &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(adjusted_lag = lag(adjusted)) %&gt;%\n  filter(!is.na(adjusted_lag)) %&gt;%\n  mutate(difference = adjusted - adjusted_lag) %&gt;%\n  mutate(pct_return = difference / adjusted_lag) %&gt;%\n  select(symbol, date, pct_return) %&gt;%\n  ungroup()\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html#conversion-to-user-item-format",
    "href": "content/01_journal/02_supervised_ml_regression.html#conversion-to-user-item-format",
    "title": "02 Supervised Machine Learning Regression",
    "section": "\n2.2 Conversion to User-Item Format",
    "text": "2.2 Conversion to User-Item Format\nThe next step involves converting to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\nImporting the correct results first (just in case I was not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(file.path(data_dir, \"sp_500_daily_returns_tbl.rds\"))\nsp_500_daily_returns_tbl\n\n\n  \n\n\n\nAnd the conversion follows with:\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  spread(key = date, value = pct_return, fill = 0)\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html#k-means-clustering",
    "href": "content/01_journal/02_supervised_ml_regression.html#k-means-clustering",
    "title": "02 Supervised Machine Learning Regression",
    "section": "\n2.3 K-Means Clustering",
    "text": "2.3 K-Means Clustering\nImporting the correct results first (just in case I was not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(file.path(data_dir, \"stock_date_matrix_tbl.rds\"))\nstock_date_matrix_tbl\n\n\n  \n\n\n\nAnd then executing the KMeans operation:\n\n# Create kmeans_obj for 4 centers\nNUM_CENTERS &lt;- 4\nN_START = 20\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = NUM_CENTERS, nstart = N_START)\nkmeans_obj$cluster\n\n#&gt;   [1] 3 2 3 2 3 3 2 3 3 2 2 3 3 3 2 4 4 4 3 3 3 4 3 3 2 3 2 3 3 3 2 2 2 3 3 3 3\n#&gt;  [38] 4 2 2 2 3 3 3 1 1 3 3 3 4 3 4 2 4 2 3 4 3 3 3 3 3 3 3 3 3 3 1 3 3 3 3 3 3\n#&gt;  [75] 3 3 3 4 3 4 3 3 3 3 3 3 4 2 3 3 3 3 3 4 3 3 3 3 4 4 3 3 3 3 3 4 3 4 3 3 3\n#&gt; [112] 1 3 3 4 3 3 2 2 3 3 3 3 3 3 1 1 4 3 3 3 3 3 3 3 3 3 3 3 4 3 3 4 3 4 4 3 1\n#&gt; [149] 3 3 2 3 3 4 3 4 3 3 3 1 4 4 4 4 3 3 4 4 2 4 3 3 4 3 1 3 2 3 1 3 4 2 3 3 3\n#&gt; [186] 3 3 1 3 3 3 3 3 3 4 1 2 3 3 3 3 4 3 3 2 2 3 2 3 3 3 3 3 1 3 3 3 3 4 3 1 1\n#&gt; [223] 3 3 3 3 3 3 1 2 3 3 4 3 3 3 4 3 3 3 2 3 2 2 3 2 2 3 3 2 3 3 4 2 3 3 3 3 3\n#&gt; [260] 3 3 3 3 3 3 3 4 3 2 4 4 2 4 1 3 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 3 2 3 4 3\n#&gt; [297] 3 2 4 4 3 3 2 4 2 3 3 4 3 3 2 3 4 3 3 3 3 4 3 1 3 1 3 2 2 3 3 3 2 2 3 1 3\n#&gt; [334] 3 4 3 2 4 3 2 3 3 1 4 3 2 3 3 2 3 3 3 4 1 3 3 3 1 3 3 3 4 4 3 3 4 3 3 3 3\n#&gt; [371] 3 4 4 3 3 4 3 4 3 3 4 1 3 3 1 2 3 2 3 3 4 3 3 2 3 3 3 3 3 3 3 3 3 3 4 3 3\n#&gt; [408] 3 3 3 4 1 4 3 2 4 4 3 4 3 3 2 3 3 2 3 3 2 4 3 4 3 3 3 3 3 3 3 3 3 2 3 3 3\n#&gt; [445] 4 2 2 2 2 3 2 2 3 4 3 3 3 3 3 3 2 3 3 2 3 3 3 1 3 4 3 2 2 4 4 3 3 3 2 4 4\n#&gt; [482] 3 3 3 4 1 3 3 3 4 2 1 4 2 1 3 3 3 3 3 3 3\n\n\nAnd using glance() to get the tot.withinss.\n\nkmeans_obj %&gt;% glance()"
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html#finding-optimal-k",
    "href": "content/01_journal/02_supervised_ml_regression.html#finding-optimal-k",
    "title": "02 Supervised Machine Learning Regression",
    "section": "\n2.4 Finding Optimal K",
    "text": "2.4 Finding Optimal K\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\n\n# Use purrr to map\nkmeans_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n    mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n    mutate(glance  = k_means %&gt;% map(glance))\nkmeans_mapped_tbl\n\n\n  \n\n\n\n\n# Visualize Scree Plot\nkmeans_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n\n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()\n\n\n\n\n\n\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the symbol is from the closes K-Means center\")\n\n#&gt; $title\n#&gt; [1] \"Skree Plot\"\n#&gt; \n#&gt; $subtitle\n#&gt; [1] \"Measures the distance each of the symbol is from the closes K-Means center\"\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"labels\""
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html#umap-application",
    "href": "content/01_journal/02_supervised_ml_regression.html#umap-application",
    "title": "02 Supervised Machine Learning Regression",
    "section": "\n2.5 UMAP Application",
    "text": "2.5 UMAP Application\n\nk_means_mapped_tbl &lt;- read_rds(file.path(data_dir, \"k_means_mapped_tbl.rds\"))\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\numap_results\n\n#&gt; umap embedding of 502 items in 2 dimensions\n#&gt; object components: layout, data, knn, config\n\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\numap_results_tbl\n\n\n  \n\n\n\n\numap_results_tbl\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html",
    "href": "content/01_journal/01_ml_fundamentals.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Load the absolute path to the data directory.\ndata_dir &lt;- params$data_dir"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#stock-prices-standardization",
    "href": "content/01_journal/01_ml_fundamentals.html#stock-prices-standardization",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.1 Stock Prices Standardization",
    "text": "2.1 Stock Prices Standardization\nStock prices (adjusted stock price) are standardized by converting them into daily returns (percent change from previous day). This is done such that the stock prices are of the same magnitude and can thus be compared. Below is the sp 500 price table shown:\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  filter(date &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(adjusted_lag = lag(adjusted)) %&gt;%\n  filter(!is.na(adjusted_lag)) %&gt;%\n  mutate(difference = adjusted - adjusted_lag) %&gt;%\n  mutate(pct_return = difference / adjusted_lag) %&gt;%\n  select(symbol, date, pct_return) %&gt;%\n  ungroup()\nprint(sp_500_daily_returns_tbl)\n\n#&gt; # A tibble: 141,340 × 3\n#&gt;    symbol date       pct_return\n#&gt;    &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n#&gt;  1 MSFT   2018-01-03   0.00465 \n#&gt;  2 MSFT   2018-01-04   0.00880 \n#&gt;  3 MSFT   2018-01-05   0.0124  \n#&gt;  4 MSFT   2018-01-08   0.00102 \n#&gt;  5 MSFT   2018-01-09  -0.000680\n#&gt;  6 MSFT   2018-01-10  -0.00453 \n#&gt;  7 MSFT   2018-01-11   0.00296 \n#&gt;  8 MSFT   2018-01-12   0.0173  \n#&gt;  9 MSFT   2018-01-16  -0.0140  \n#&gt; 10 MSFT   2018-01-17   0.0203  \n#&gt; # ℹ 141,330 more rows"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#conversion-to-user-item-format",
    "href": "content/01_journal/01_ml_fundamentals.html#conversion-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.2 Conversion to User-Item Format",
    "text": "2.2 Conversion to User-Item Format\nThe next step involves converting to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\nImporting the correct results first (just in case I was not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(file.path(data_dir, \"sp_500_daily_returns_tbl.rds\"))\nprint(sp_500_daily_returns_tbl)\n\n#&gt; # A tibble: 141,340 × 3\n#&gt;    symbol date       pct_return\n#&gt;    &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n#&gt;  1 MSFT   2018-01-03   0.00465 \n#&gt;  2 MSFT   2018-01-04   0.00880 \n#&gt;  3 MSFT   2018-01-05   0.0124  \n#&gt;  4 MSFT   2018-01-08   0.00102 \n#&gt;  5 MSFT   2018-01-09  -0.000680\n#&gt;  6 MSFT   2018-01-10  -0.00453 \n#&gt;  7 MSFT   2018-01-11   0.00296 \n#&gt;  8 MSFT   2018-01-12   0.0173  \n#&gt;  9 MSFT   2018-01-16  -0.0140  \n#&gt; 10 MSFT   2018-01-17   0.0203  \n#&gt; # ℹ 141,330 more rows\n\n\nAnd the conversion follows with:\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  spread(key = date, value = pct_return, fill = 0)\nstock_date_matrix_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 502 × 283\n#&gt;    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#&gt;    &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n#&gt;  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#&gt;  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#&gt;  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#&gt;  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#&gt;  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#&gt;  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#&gt;  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#&gt;  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#&gt;  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#&gt; 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#&gt; # ℹ 492 more rows\n#&gt; # ℹ 277 more variables: `2018-01-10` &lt;dbl&gt;, `2018-01-11` &lt;dbl&gt;,\n#&gt; #   `2018-01-12` &lt;dbl&gt;, `2018-01-16` &lt;dbl&gt;, `2018-01-17` &lt;dbl&gt;,\n#&gt; #   `2018-01-18` &lt;dbl&gt;, `2018-01-19` &lt;dbl&gt;, `2018-01-22` &lt;dbl&gt;,\n#&gt; #   `2018-01-23` &lt;dbl&gt;, `2018-01-24` &lt;dbl&gt;, `2018-01-25` &lt;dbl&gt;,\n#&gt; #   `2018-01-26` &lt;dbl&gt;, `2018-01-29` &lt;dbl&gt;, `2018-01-30` &lt;dbl&gt;,\n#&gt; #   `2018-01-31` &lt;dbl&gt;, `2018-02-01` &lt;dbl&gt;, `2018-02-02` &lt;dbl&gt;, …"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#k-means-clustering",
    "href": "content/01_journal/01_ml_fundamentals.html#k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.3 K-Means Clustering",
    "text": "2.3 K-Means Clustering\nImporting the correct results first (just in case I was not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(file.path(data_dir, \"stock_date_matrix_tbl.rds\"))\nstock_date_matrix_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 502 × 283\n#&gt;    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#&gt;    &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n#&gt;  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#&gt;  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#&gt;  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#&gt;  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#&gt;  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#&gt;  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#&gt;  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#&gt;  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#&gt;  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#&gt; 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#&gt; # ℹ 492 more rows\n#&gt; # ℹ 277 more variables: `2018-01-10` &lt;dbl&gt;, `2018-01-11` &lt;dbl&gt;,\n#&gt; #   `2018-01-12` &lt;dbl&gt;, `2018-01-16` &lt;dbl&gt;, `2018-01-17` &lt;dbl&gt;,\n#&gt; #   `2018-01-18` &lt;dbl&gt;, `2018-01-19` &lt;dbl&gt;, `2018-01-22` &lt;dbl&gt;,\n#&gt; #   `2018-01-23` &lt;dbl&gt;, `2018-01-24` &lt;dbl&gt;, `2018-01-25` &lt;dbl&gt;,\n#&gt; #   `2018-01-26` &lt;dbl&gt;, `2018-01-29` &lt;dbl&gt;, `2018-01-30` &lt;dbl&gt;,\n#&gt; #   `2018-01-31` &lt;dbl&gt;, `2018-02-01` &lt;dbl&gt;, `2018-02-02` &lt;dbl&gt;, …\n\n\nAnd then executing the KMeans operation:\n\n# Create kmeans_obj for 4 centers\nNUM_CENTERS &lt;- 4\nN_START = 20\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = NUM_CENTERS, nstart = N_START)\nprint(kmeans_obj$cluster)\n\n#&gt;   [1] 1 4 1 4 1 1 4 1 1 4 4 1 1 1 4 3 3 3 1 1 1 3 1 1 4 1 4 1 1 1 4 4 4 1 1 1 1\n#&gt;  [38] 3 4 4 4 1 1 1 2 2 1 1 1 3 1 3 4 3 4 1 3 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n#&gt;  [75] 1 1 1 3 1 3 1 1 1 1 1 1 3 4 1 1 1 1 1 3 1 1 1 1 3 3 1 1 1 1 1 3 1 3 1 1 1\n#&gt; [112] 2 1 1 3 1 1 4 4 1 1 1 1 1 1 2 2 3 1 1 1 1 1 1 1 1 1 1 1 3 1 1 3 1 3 3 1 2\n#&gt; [149] 1 1 4 1 1 3 1 3 1 1 1 2 3 3 3 3 1 1 3 3 4 3 1 1 3 1 2 1 4 1 2 1 3 4 1 1 1\n#&gt; [186] 1 1 2 1 1 1 1 1 1 3 2 4 1 1 1 1 3 1 1 4 4 1 4 1 1 1 1 1 2 1 1 1 1 3 1 2 2\n#&gt; [223] 1 1 1 1 1 1 2 4 1 1 3 1 1 1 3 1 1 1 4 1 4 4 1 4 4 1 1 4 1 1 3 4 1 1 1 1 1\n#&gt; [260] 1 1 1 1 1 1 1 3 1 4 3 3 4 3 2 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 4 1 3 1\n#&gt; [297] 1 4 3 3 1 1 4 3 4 1 1 3 1 1 4 1 3 1 1 1 1 3 1 2 1 2 1 4 4 1 1 1 4 4 1 2 1\n#&gt; [334] 1 3 1 4 3 1 4 1 1 2 3 1 4 1 1 4 1 1 1 3 2 1 1 1 2 1 1 1 3 3 1 1 3 1 1 1 1\n#&gt; [371] 1 3 3 1 1 3 1 3 1 1 3 2 1 1 2 4 1 4 1 1 3 1 1 4 1 1 1 1 1 1 1 1 1 1 3 1 1\n#&gt; [408] 1 1 1 3 2 3 1 4 3 3 1 3 1 1 4 1 1 4 1 1 4 3 1 3 1 1 1 1 1 1 1 1 1 4 1 1 1\n#&gt; [445] 3 4 4 4 4 1 4 4 1 3 1 1 1 1 1 1 4 1 1 4 1 1 1 2 1 3 1 4 4 3 3 1 1 1 4 3 3\n#&gt; [482] 1 1 1 3 2 1 1 1 3 4 2 3 4 2 1 1 1 1 1 1 1\n\n\nAnd using glance() to get the tot.withinss.\n\nkmeans_obj %&gt;% glance()"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#finding-optimal-k",
    "href": "content/01_journal/01_ml_fundamentals.html#finding-optimal-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.4 Finding Optimal K",
    "text": "2.4 Finding Optimal K\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\n\n# Use purrr to map\nkmeans_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n    mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n    mutate(glance  = k_means %&gt;% map(glance))\nprint(kmeans_mapped_tbl)\n\n#&gt; # A tibble: 30 × 3\n#&gt;    centers k_means  glance          \n#&gt;      &lt;int&gt; &lt;list&gt;   &lt;list&gt;          \n#&gt;  1       1 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  2       2 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  3       3 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  4       4 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  5       5 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  6       6 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  7       7 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  8       8 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  9       9 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; 10      10 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; # ℹ 20 more rows\n\n\n\n# Visualize Scree Plot\nkmeans_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#umap-application",
    "href": "content/01_journal/01_ml_fundamentals.html#umap-application",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.5 UMAP Application",
    "text": "2.5 UMAP Application\n\nk_means_mapped_tbl &lt;- read_rds(file.path(data_dir, \"k_means_mapped_tbl.rds\"))\nprint(k_means_mapped_tbl)\n\n#&gt; # A tibble: 30 × 3\n#&gt;    centers k_means  glance          \n#&gt;      &lt;int&gt; &lt;list&gt;   &lt;list&gt;          \n#&gt;  1       1 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  2       2 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  3       3 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  4       4 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  5       5 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  6       6 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  7       7 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  8       8 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  9       9 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; 10      10 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; # ℹ 20 more rows\n\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\numap_results\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(\n    stock_date_matrix_tbl %&gt;% select(symbol)\n  )\nprint(umap_results_tbl)\n\n#&gt; # A tibble: 502 × 3\n#&gt;         V1      V2 symbol\n#&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1 -1.02    1.57   A     \n#&gt;  2  1.89    1.22   AAL   \n#&gt;  3  0.0687 -0.236  AAP   \n#&gt;  4 -1.74    3.14   AAPL  \n#&gt;  5 -1.05    0.0657 ABBV  \n#&gt;  6 -0.523  -0.799  ABC   \n#&gt;  7 -2.20    2.71   ABMD  \n#&gt;  8 -1.04    1.10   ABT   \n#&gt;  9 -1.47    1.54   ACN   \n#&gt; 10 -2.22    3.25   ADBE  \n#&gt; # ℹ 492 more rows\n\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#combination-of-k-means-and-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#combination-of-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.6 Combination of K-Means and UMAP",
    "text": "2.6 Combination of K-Means and UMAP\nNow the K-Means clusters and the UMAP 2D representation are being combined\nImporting the correct results first (just in case I was not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(file.path(data_dir, \"k_means_mapped_tbl.rds\"))\numap_results_tbl   &lt;- read_rds(file.path(data_dir, \"umap_results_tbl.rds\"))\nprint(umap_results_tbl)\n\n#&gt; # A tibble: 502 × 3\n#&gt;         V1      V2 symbol\n#&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1 -0.764   1.65   A     \n#&gt;  2 -2.70    0.455  AAL   \n#&gt;  3  0.739  -0.0320 AAP   \n#&gt;  4  0.0130  3.09   AAPL  \n#&gt;  5 -0.965  -0.0193 ABBV  \n#&gt;  6 -0.506  -0.659  ABC   \n#&gt;  7  0.436   3.10   ABMD  \n#&gt;  8 -0.262   1.35   ABT   \n#&gt;  9  0.0598  1.63   ACN   \n#&gt; 10  0.570   3.43   ADBE  \n#&gt; # ℹ 492 more rows\n\n\nNow, the first 10 KMeans items are to be selected as the ScreePlot flattens beyond this one.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  pull(k_means) %&gt;%\n  pluck(10)\n\nNext, the clusters from the k_means_obj with the umap_results_tbl are being combined.\n\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\nprint(umap_kmeans_results_tbl)\n\n#&gt; # A tibble: 502 × 6\n#&gt;    symbol .cluster      V1      V2 company                       sector         \n#&gt;    &lt;chr&gt;  &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                         &lt;chr&gt;          \n#&gt;  1 A      7        -0.764   1.65   Agilent Technologies Inc.     Health Care    \n#&gt;  2 AAL    2        -2.70    0.455  American Airlines Group Inc.  Industrials    \n#&gt;  3 AAP    10        0.739  -0.0320 Advance Auto Parts Inc.       Consumer Discr…\n#&gt;  4 AAPL   9         0.0130  3.09   Apple Inc.                    Information Te…\n#&gt;  5 ABBV   7        -0.965  -0.0193 AbbVie Inc.                   Health Care    \n#&gt;  6 ABC    5        -0.506  -0.659  AmerisourceBergen Corporation Health Care    \n#&gt;  7 ABMD   9         0.436   3.10   ABIOMED Inc.                  Health Care    \n#&gt;  8 ABT    7        -0.262   1.35   Abbott Laboratories           Health Care    \n#&gt;  9 ACN    7         0.0598  1.63   Accenture Plc Class A         Information Te…\n#&gt; 10 ADBE   9         0.570   3.43   Adobe Inc.                    Information Te…\n#&gt; # ℹ 492 more rows\n\n\nAnd finally plotting the K-Means and UMAP results.\n\n# Visualize the combined K-Means and UMAP results\nlibrary(viridis)\n\numap_kmeans_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = viridis_pal()(10))"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html",
    "href": "data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  }
]