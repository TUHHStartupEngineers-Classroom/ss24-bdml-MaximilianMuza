[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My PBL Journal",
    "section": "",
    "text": "This is my PBL journal for journaling this course’s challenges. In total there are six challenges all regarding ML applied to business data science."
  },
  {
    "objectID": "index.html#challenges",
    "href": "index.html#challenges",
    "title": "My PBL Journal",
    "section": "Challenges",
    "text": "Challenges\n\nMachine Learning Fundamentals\nSupervised ML Regression\nAutomated ML with H20 (I)\nAutomated ML with H20 (II)\nPerformance Measures\nBlack-Box Models with LIME"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/04_automated_ml_h20_2.html",
    "href": "content/01_journal/04_automated_ml_h20_2.html",
    "title": "04 Automated Machine Learning with H2O (II)",
    "section": "",
    "text": "Load the absolute path to the data directory.\n\ndata_dir &lt;- params$data_dir\nmodels_dir &lt;- params$models_dir\n\n\n1 Libraries\n\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(recipes)\n\n#&gt; \n#&gt; Attaching package: 'recipes'\n\n\n#&gt; The following object is masked from 'package:stringr':\n#&gt; \n#&gt;     fixed\n\n\n#&gt; The following object is masked from 'package:stats':\n#&gt; \n#&gt;     step\n\nlibrary(rsample)\n\n\n2 Load Data\n\nproduct_backorders_tbl &lt;- read_csv(file = file.path(data_dir, \"product_backorders.txt\"))\n\n#&gt; Rows: 19053 Columns: 23\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#&gt; dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproduct_backorders_tbl\n\n\n  \n\n\n\nSplit data into testing + training dataset\n\nset.seed(123)\nsplit &lt;- initial_split(product_backorders_tbl, prop = 3/4)\n\ntrain_tbl &lt;- training(split)\ntest_tbl  &lt;- testing(split)\n\n\n3 Specify Predictor + Responde Variables\n\nproduct_recipe_obj &lt;- recipe(went_on_backorder ~., data = train_tbl) %&gt;% \n    step_zv(all_predictors()) %&gt;% \n    step_dummy(all_nominal(), -all_outcomes()) %&gt;%\n    # step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE) %&gt;%\n    prep()\nproduct_recipe_obj\n\n#&gt; \n\n\n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n#&gt; \n\n\n#&gt; ── Inputs\n\n\n#&gt; Number of variables by role\n\n\n#&gt; outcome:    1\n#&gt; predictor: 22\n\n\n#&gt; \n\n\n#&gt; ── Training information\n\n\n#&gt; Training data contained 14289 data points and 816 incomplete rows.\n\n\n#&gt; \n\n\n#&gt; ── Operations\n\n\n#&gt; • Zero variance filter removed: &lt;none&gt; | Trained\n\n\n#&gt; • Dummy variables from: potential_issue and deck_risk, ... | Trained\n\ntrain_trafo_tbl  &lt;- bake(product_recipe_obj, new_data = train_tbl)\ntest_trafo_tbl  &lt;- bake(product_recipe_obj, new_data = test_tbl)\n\n\n4 Run H2O\nInit H2O and create H2O test and train datasets\n\nh2o.init()\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_trafo_tbl), ratios = c(3/4), seed = 123)\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_trafo_tbl)\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nCreate AutoML ML Models\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5\n)\n\n\n5 Inspect Leaderboard\n\nslotNames(automl_models_h2o)\nautoml_models_h2o@leaderboard\n\n\n6 Predict using the Leader Model\n\nleader_model &lt;- automl_models_h2o@leader\nleader_model\n\npredictions &lt;- h2o.predict(leader_model, newdata = test_h2o)\npredictions\n\n\n7 Save Model\n\nh2o.getModel(leader_model@model_id) %&gt;%\n  h2o.saveModel(path = models_dir)"
  },
  {
    "objectID": "content/01_journal/02_supervised_ml_regression.html",
    "href": "content/01_journal/02_supervised_ml_regression.html",
    "title": "02 Supervised Machine Learning Regression",
    "section": "",
    "text": "Load the absolute path to the data directory.\n\ndata_dir &lt;- params$data_dir\n\n\n1 Libraries\n\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\n\n\n2 Data\n\nbike_features_tbl &lt;- readRDS(file.path(data_dir, \"bike_features_tbl.rds\"))\nbike_features_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 231 × 67\n#&gt;    bike_id model    model_year frame_material weight price category_1 category_2\n#&gt;      &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     \n#&gt;  1    2875 Aeroad …       2020 carbon           7.6   4579 Road       Race      \n#&gt;  2    2873 Aeroad …       2020 carbon           7.27  6919 Road       Race      \n#&gt;  3    2874 Aeroad …       2020 carbon           7.1   6429 Road       Race      \n#&gt;  4    2876 Aeroad …       2020 carbon           7.73  5069 Road       Race      \n#&gt;  5    2877 Aeroad …       2020 carbon           7.83  3609 Road       Race      \n#&gt;  6    2225 Aeroad …       2019 carbon           6.8   6139 Road       Race      \n#&gt;  7    2091 Aeroad …       2019 carbon           6.8   5359 Road       Race      \n#&gt;  8    2086 Aeroad …       2021 carbon           7.6   2629 Road       Race      \n#&gt;  9    2088 Aeroad …       2020 carbon           7.3   3699 Road       Race      \n#&gt; 10    2120 Aeroad …       2020 carbon           7.2   3219 Road       Race      \n#&gt; # ℹ 221 more rows\n#&gt; # ℹ 59 more variables: category_3 &lt;chr&gt;, gender &lt;chr&gt;, url &lt;chr&gt;, Frame &lt;chr&gt;,\n#&gt; #   Fork &lt;chr&gt;, `Rear Derailleur` &lt;chr&gt;, `Front Derailleur` &lt;chr&gt;,\n#&gt; #   Cassette &lt;chr&gt;, Crank &lt;chr&gt;, `Bottom bracket` &lt;chr&gt;, `Thru Axle` &lt;chr&gt;,\n#&gt; #   Cockpit &lt;chr&gt;, Saddle &lt;chr&gt;, Seatpost &lt;chr&gt;, Pedals &lt;chr&gt;,\n#&gt; #   `Derailleur hanger` &lt;chr&gt;, Battery &lt;chr&gt;, Brake &lt;chr&gt;, `Shift Lever` &lt;chr&gt;,\n#&gt; #   Chain &lt;chr&gt;, Stem &lt;chr&gt;, Handlebar &lt;chr&gt;, Headset &lt;chr&gt;, Motor &lt;chr&gt;, …\n\n\nTransform dataset\n\nbike_features_trafo_tbl &lt;- bike_features_tbl %&gt;% \n    select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;%\n    mutate_if(is.numeric, ~replace(., is.na(.), 0)) %&gt;%\n    mutate(id = row_number()) %&gt;% \n    select(id, everything(), -url)\nbike_features_trafo_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 231 × 12\n#&gt;       id model      model_year frame_material weight price category_1 category_2\n#&gt;    &lt;int&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     \n#&gt;  1     1 Aeroad CF…       2020 carbon           7.6   4579 Road       Race      \n#&gt;  2     2 Aeroad CF…       2020 carbon           7.27  6919 Road       Race      \n#&gt;  3     3 Aeroad CF…       2020 carbon           7.1   6429 Road       Race      \n#&gt;  4     4 Aeroad CF…       2020 carbon           7.73  5069 Road       Race      \n#&gt;  5     5 Aeroad CF…       2020 carbon           7.83  3609 Road       Race      \n#&gt;  6     6 Aeroad CF…       2019 carbon           6.8   6139 Road       Race      \n#&gt;  7     7 Aeroad CF…       2019 carbon           6.8   5359 Road       Race      \n#&gt;  8     8 Aeroad CF…       2021 carbon           7.6   2629 Road       Race      \n#&gt;  9     9 Aeroad CF…       2020 carbon           7.3   3699 Road       Race      \n#&gt; 10    10 Aeroad WM…       2020 carbon           7.2   3219 Road       Race      \n#&gt; # ℹ 221 more rows\n#&gt; # ℹ 4 more variables: category_3 &lt;chr&gt;, gender &lt;chr&gt;, `Rear Derailleur` &lt;chr&gt;,\n#&gt; #   `Shift Lever` &lt;chr&gt;\n\n\nCreate training and testing dataset (Hold-out method)\n\nbike_features_trafo_tbl %&gt;% distinct(category_2)\n\n\n  \n\n\nset.seed(123)\nsplit &lt;- initial_split(bike_features_trafo_tbl, prop = 3/4, strata = \"category_2\")\n\nsplit %&gt;% training() %&gt;% distinct(category_2)\n\n\n  \n\n\nsplit %&gt;% testing() %&gt;% distinct(category_2)\n\n\n  \n\n\ntrain_tbl &lt;- training(split)\ntest_tbl  &lt;- testing(split)\n\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n\n3 Model Construction\nFirst step involves building a ML model.\n\nlinear_reg_model &lt;- linear_reg(mode = \"regression\") %&gt;%\n    set_engine(\"lm\")\nlinear_reg_model\n\n#&gt; Linear Regression Model Specification (regression)\n#&gt; \n#&gt; Computational engine: lm\n\n\n\n4 Feature Creation\nIn this step, features are being created by the use of the recipe package.\n\n# Determine feature trafo\nbike_recipe &lt;- recipe(price ~ category_2 + frame_material, data = train_tbl) %&gt;%\n  step_rm(url, model) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)\nbike_recipe\n\n#&gt; \n\n\n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n#&gt; \n\n\n#&gt; ── Inputs\n\n\n#&gt; Number of variables by role\n\n\n#&gt; outcome:   1\n#&gt; predictor: 2\n\n\n#&gt; \n\n\n#&gt; ── Operations\n\n\n#&gt; • Variables removed: url and model\n\n\n#&gt; • Dummy variables from: all_nominal() and -all_outcomes()\n\n\n\n5 Model and Recipe Bundling\nThe ML model and the recipe is being bundled by the use of the workflow package.\n\nbike_workflow &lt;- workflow() %&gt;% \n  add_model(linear_reg_model) %&gt;% \n  add_recipe(bike_recipe) %&gt;%\n  fit(data = train_tbl)\nbike_workflow\n\n#&gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: linear_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_rm()\n#&gt; • step_dummy()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = ..y ~ ., data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;                                           (Intercept)  \n#&gt;                                            -1.112e+06  \n#&gt;                                            model_year  \n#&gt;                                             5.510e+02  \n#&gt;                                                weight  \n#&gt;                                             1.913e+02  \n#&gt;                              frame_material_aluminium  \n#&gt;                                            -8.989e+02  \n#&gt;                                 frame_material_carbon  \n#&gt;                                                    NA  \n#&gt;                                    category_1_E.Bikes  \n#&gt;                                             1.633e+03  \n#&gt;                                     category_1_Gravel  \n#&gt;                                             1.294e+03  \n#&gt;                              category_1_Hybrid...City  \n#&gt;                                             1.188e+03  \n#&gt;                                   category_1_Mountain  \n#&gt;                                             1.539e+03  \n#&gt;                                       category_1_Road  \n#&gt;                                                    NA  \n#&gt;                                  category_2_Adventure  \n#&gt;                                             9.525e+02  \n#&gt;                                   category_2_All.Road  \n#&gt;                                                    NA  \n#&gt;                                       category_2_City  \n#&gt;                                            -3.603e+03  \n#&gt;                              category_2_Cross.Country  \n#&gt;                                             6.363e+02  \n#&gt;                                 category_2_Cyclocross  \n#&gt;                                            -1.318e+03  \n#&gt;                                  category_2_Dirt.Jump  \n#&gt;                                             3.378e+01  \n#&gt;                                   category_2_Downhill  \n#&gt;                                            -2.931e+03  \n#&gt;                                     category_2_E.City  \n#&gt;                                             2.642e+02  \n#&gt;                                  category_2_E.Fitness  \n#&gt;                                             7.596e+02  \n#&gt;                                   category_2_E.Gravel  \n#&gt;                                            -9.307e+02  \n#&gt;                                 category_2_E.Mountain  \n#&gt;                                             1.732e+02  \n#&gt;                                 category_2_E.Trekking  \n#&gt;                                                    NA  \n#&gt;                                  category_2_Endurance  \n#&gt; \n#&gt; ...\n#&gt; and 220 more lines.\n\n\n\n6 Performance Measures\nModel evaluation by the use of the yardstick package\n\nevaluation &lt;- bike_workflow %&gt;%\n  predict(new_data = test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  metrics(truth = price, estimate = .pred)\n\n#&gt; Warning: ! There are new levels in a factor: `E-Road`.\n\n\n#&gt; Warning: ! There are new levels in a factor: `Endurace:ON`.\n\n\n#&gt; Warning: ! There are new levels in a factor: `Shimano Ultegra RX800 GS`, `SRAM X01 DH`,\n#&gt;   `Shimano Saint M820 SS`, and `Shimano Deore, 10s`.\n\n\n#&gt; Warning: ! There are new levels in a factor: `Shimano Saint M820 10s` and `Shimano XTR\n#&gt;   M9100 12s`.\n\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\", : prediction from rank-deficient fit; consider predict(.,\n#&gt; rankdeficient=\"NA\")\n\nevaluation\n\n\n  \n\n\n\n\n7 Visualization\n\ng1 &lt;- bike_features_trafo_tbl %&gt;% \n    mutate(category_2 = as.factor(category_2) %&gt;% \n           fct_reorder(price)) %&gt;% \n    \n    ggplot(aes(category_2, price)) +\n    geom_violin() +\n    geom_jitter(width = 0.1, alpha = 0.5, color = \"#2dc6d6\") +\n    coord_flip() +\n    facet_wrap(~ frame_material) +\n    scale_y_continuous(labels = scales::dollar_format()) +\n    labs(\n        title = \"Unit Price for Each Model\",\n        y = \"\", x = \"Category 2\"\n    )\ng1\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html",
    "href": "content/01_journal/01_ml_fundamentals.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Load the absolute path to the data directory.\ndata_dir &lt;- params$data_dir"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#stock-prices-standardization",
    "href": "content/01_journal/01_ml_fundamentals.html#stock-prices-standardization",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.1 Stock Prices Standardization",
    "text": "2.1 Stock Prices Standardization\nStock prices (adjusted stock price) are standardized by converting them into daily returns (percent change from previous day). This is done such that the stock prices are of the same magnitude and can thus be compared. Below is the sp 500 price table shown:\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  filter(date &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(adjusted_lag = lag(adjusted)) %&gt;%\n  filter(!is.na(adjusted_lag)) %&gt;%\n  mutate(difference = adjusted - adjusted_lag) %&gt;%\n  mutate(pct_return = difference / adjusted_lag) %&gt;%\n  select(symbol, date, pct_return) %&gt;%\n  ungroup()\nprint(sp_500_daily_returns_tbl)\n\n#&gt; # A tibble: 141,340 × 3\n#&gt;    symbol date       pct_return\n#&gt;    &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n#&gt;  1 MSFT   2018-01-03   0.00465 \n#&gt;  2 MSFT   2018-01-04   0.00880 \n#&gt;  3 MSFT   2018-01-05   0.0124  \n#&gt;  4 MSFT   2018-01-08   0.00102 \n#&gt;  5 MSFT   2018-01-09  -0.000680\n#&gt;  6 MSFT   2018-01-10  -0.00453 \n#&gt;  7 MSFT   2018-01-11   0.00296 \n#&gt;  8 MSFT   2018-01-12   0.0173  \n#&gt;  9 MSFT   2018-01-16  -0.0140  \n#&gt; 10 MSFT   2018-01-17   0.0203  \n#&gt; # ℹ 141,330 more rows"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#conversion-to-user-item-format",
    "href": "content/01_journal/01_ml_fundamentals.html#conversion-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.2 Conversion to User-Item Format",
    "text": "2.2 Conversion to User-Item Format\nThe next step involves converting to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\nImporting the correct results first (just in case I was not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(file.path(data_dir, \"sp_500_daily_returns_tbl.rds\"))\nprint(sp_500_daily_returns_tbl)\n\n#&gt; # A tibble: 141,340 × 3\n#&gt;    symbol date       pct_return\n#&gt;    &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n#&gt;  1 MSFT   2018-01-03   0.00465 \n#&gt;  2 MSFT   2018-01-04   0.00880 \n#&gt;  3 MSFT   2018-01-05   0.0124  \n#&gt;  4 MSFT   2018-01-08   0.00102 \n#&gt;  5 MSFT   2018-01-09  -0.000680\n#&gt;  6 MSFT   2018-01-10  -0.00453 \n#&gt;  7 MSFT   2018-01-11   0.00296 \n#&gt;  8 MSFT   2018-01-12   0.0173  \n#&gt;  9 MSFT   2018-01-16  -0.0140  \n#&gt; 10 MSFT   2018-01-17   0.0203  \n#&gt; # ℹ 141,330 more rows\n\n\nAnd the conversion follows with:\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  spread(key = date, value = pct_return, fill = 0)\nstock_date_matrix_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 502 × 283\n#&gt;    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#&gt;    &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n#&gt;  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#&gt;  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#&gt;  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#&gt;  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#&gt;  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#&gt;  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#&gt;  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#&gt;  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#&gt;  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#&gt; 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#&gt; # ℹ 492 more rows\n#&gt; # ℹ 277 more variables: `2018-01-10` &lt;dbl&gt;, `2018-01-11` &lt;dbl&gt;,\n#&gt; #   `2018-01-12` &lt;dbl&gt;, `2018-01-16` &lt;dbl&gt;, `2018-01-17` &lt;dbl&gt;,\n#&gt; #   `2018-01-18` &lt;dbl&gt;, `2018-01-19` &lt;dbl&gt;, `2018-01-22` &lt;dbl&gt;,\n#&gt; #   `2018-01-23` &lt;dbl&gt;, `2018-01-24` &lt;dbl&gt;, `2018-01-25` &lt;dbl&gt;,\n#&gt; #   `2018-01-26` &lt;dbl&gt;, `2018-01-29` &lt;dbl&gt;, `2018-01-30` &lt;dbl&gt;,\n#&gt; #   `2018-01-31` &lt;dbl&gt;, `2018-02-01` &lt;dbl&gt;, `2018-02-02` &lt;dbl&gt;, …"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#k-means-clustering",
    "href": "content/01_journal/01_ml_fundamentals.html#k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.3 K-Means Clustering",
    "text": "2.3 K-Means Clustering\nImporting the correct results first (just in case I was not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(file.path(data_dir, \"stock_date_matrix_tbl.rds\"))\nstock_date_matrix_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 502 × 283\n#&gt;    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#&gt;    &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n#&gt;  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#&gt;  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#&gt;  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#&gt;  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#&gt;  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#&gt;  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#&gt;  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#&gt;  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#&gt;  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#&gt; 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#&gt; # ℹ 492 more rows\n#&gt; # ℹ 277 more variables: `2018-01-10` &lt;dbl&gt;, `2018-01-11` &lt;dbl&gt;,\n#&gt; #   `2018-01-12` &lt;dbl&gt;, `2018-01-16` &lt;dbl&gt;, `2018-01-17` &lt;dbl&gt;,\n#&gt; #   `2018-01-18` &lt;dbl&gt;, `2018-01-19` &lt;dbl&gt;, `2018-01-22` &lt;dbl&gt;,\n#&gt; #   `2018-01-23` &lt;dbl&gt;, `2018-01-24` &lt;dbl&gt;, `2018-01-25` &lt;dbl&gt;,\n#&gt; #   `2018-01-26` &lt;dbl&gt;, `2018-01-29` &lt;dbl&gt;, `2018-01-30` &lt;dbl&gt;,\n#&gt; #   `2018-01-31` &lt;dbl&gt;, `2018-02-01` &lt;dbl&gt;, `2018-02-02` &lt;dbl&gt;, …\n\n\nAnd then executing the KMeans operation:\n\n# Create kmeans_obj for 4 centers\nNUM_CENTERS &lt;- 4\nN_START = 20\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = NUM_CENTERS, nstart = N_START)\nprint(kmeans_obj$cluster)\n\n#&gt;   [1] 2 1 2 1 2 2 1 2 2 1 1 2 2 2 1 4 4 4 2 2 2 4 2 2 1 2 1 2 2 2 1 1 1 2 2 2 2\n#&gt;  [38] 4 1 1 1 2 2 2 3 3 2 2 2 4 2 4 1 4 1 2 4 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2\n#&gt;  [75] 2 2 2 4 2 4 2 2 2 2 2 2 4 1 2 2 2 2 2 4 2 2 2 2 4 4 2 2 2 2 2 4 2 4 2 2 2\n#&gt; [112] 3 2 2 4 2 2 1 1 2 2 2 2 2 2 3 3 4 2 2 2 2 2 2 2 2 2 2 2 4 2 2 4 2 4 4 2 3\n#&gt; [149] 2 2 1 2 2 4 2 4 2 2 2 3 4 4 4 4 2 2 4 4 1 4 2 2 4 2 3 2 1 2 3 2 4 1 2 2 2\n#&gt; [186] 2 2 3 2 2 2 2 2 2 4 3 1 2 2 2 2 4 2 2 1 1 2 1 2 2 2 2 2 3 2 2 2 2 4 2 3 3\n#&gt; [223] 2 2 2 2 2 2 3 1 2 2 4 2 2 2 4 2 2 2 1 2 1 1 2 1 1 2 2 1 2 2 4 1 2 2 2 2 2\n#&gt; [260] 2 2 2 2 2 2 2 4 2 1 4 4 1 4 3 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 1 2 4 2\n#&gt; [297] 2 1 4 4 2 2 1 4 1 2 2 4 2 2 1 2 4 2 2 2 2 4 2 3 2 3 2 1 1 2 2 2 1 1 2 3 2\n#&gt; [334] 2 4 2 1 4 2 1 2 2 3 4 2 1 2 2 1 2 2 2 4 3 2 2 2 3 2 2 2 4 4 2 2 4 2 2 2 2\n#&gt; [371] 2 4 4 2 2 4 2 4 2 2 4 3 2 2 3 1 2 1 2 2 4 2 2 1 2 2 2 2 2 2 2 2 2 2 4 2 2\n#&gt; [408] 2 2 2 4 3 4 2 1 4 4 2 4 2 2 1 2 2 1 2 2 1 4 2 4 2 2 2 2 2 2 2 2 2 1 2 2 2\n#&gt; [445] 4 1 1 1 1 2 1 1 2 4 2 2 2 2 2 2 1 2 2 1 2 2 2 3 2 4 2 1 1 4 4 2 2 2 1 4 4\n#&gt; [482] 2 2 2 4 3 2 2 2 4 1 3 4 1 3 2 2 2 2 2 2 2\n\n\nAnd using glance() to get the tot.withinss.\n\nkmeans_obj %&gt;% glance()"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#finding-optimal-k",
    "href": "content/01_journal/01_ml_fundamentals.html#finding-optimal-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.4 Finding Optimal K",
    "text": "2.4 Finding Optimal K\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\n\n# Use purrr to map\nkmeans_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n    mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n    mutate(glance  = k_means %&gt;% map(glance))\nprint(kmeans_mapped_tbl)\n\n#&gt; # A tibble: 30 × 3\n#&gt;    centers k_means  glance          \n#&gt;      &lt;int&gt; &lt;list&gt;   &lt;list&gt;          \n#&gt;  1       1 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  2       2 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  3       3 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  4       4 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  5       5 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  6       6 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  7       7 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  8       8 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  9       9 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; 10      10 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; # ℹ 20 more rows\n\n\n\n# Visualize Scree Plot\nkmeans_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#umap-application",
    "href": "content/01_journal/01_ml_fundamentals.html#umap-application",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.5 UMAP Application",
    "text": "2.5 UMAP Application\n\nk_means_mapped_tbl &lt;- read_rds(file.path(data_dir, \"k_means_mapped_tbl.rds\"))\nprint(k_means_mapped_tbl)\n\n#&gt; # A tibble: 30 × 3\n#&gt;    centers k_means  glance          \n#&gt;      &lt;int&gt; &lt;list&gt;   &lt;list&gt;          \n#&gt;  1       1 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  2       2 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  3       3 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  4       4 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  5       5 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  6       6 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  7       7 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  8       8 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt;  9       9 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; 10      10 &lt;kmeans&gt; &lt;tibble [1 × 4]&gt;\n#&gt; # ℹ 20 more rows\n\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\numap_results\n\n#&gt; umap embedding of 502 items in 2 dimensions\n#&gt; object components: layout, data, knn, config\n\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n    as_tibble() %&gt;%\n    bind_cols(\n      stock_date_matrix_tbl %&gt;% select(symbol)\n  )\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\nprint(umap_results_tbl)\n\n#&gt; # A tibble: 502 × 3\n#&gt;        V1      V2 symbol\n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1  0.720  1.90   A     \n#&gt;  2  1.29   1.19   AAL   \n#&gt;  3 -0.141 -0.518  AAP   \n#&gt;  4  0.722  3.29   AAPL  \n#&gt;  5 -1.07   0.791  ABBV  \n#&gt;  6 -1.07  -0.0926 ABC   \n#&gt;  7  0.251  3.32   ABMD  \n#&gt;  8  0.348  1.74   ABT   \n#&gt;  9  0.208  2.06   ACN   \n#&gt; 10  0.467  3.70   ADBE  \n#&gt; # ℹ 492 more rows\n\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#combination-of-k-means-and-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#combination-of-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n2.6 Combination of K-Means and UMAP",
    "text": "2.6 Combination of K-Means and UMAP\nNow the K-Means clusters and the UMAP 2D representation are being combined\nImporting the correct results first (just in case I was not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(file.path(data_dir, \"k_means_mapped_tbl.rds\"))\numap_results_tbl   &lt;- read_rds(file.path(data_dir, \"umap_results_tbl.rds\"))\nprint(umap_results_tbl)\n\n#&gt; # A tibble: 502 × 3\n#&gt;         V1      V2 symbol\n#&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1 -0.764   1.65   A     \n#&gt;  2 -2.70    0.455  AAL   \n#&gt;  3  0.739  -0.0320 AAP   \n#&gt;  4  0.0130  3.09   AAPL  \n#&gt;  5 -0.965  -0.0193 ABBV  \n#&gt;  6 -0.506  -0.659  ABC   \n#&gt;  7  0.436   3.10   ABMD  \n#&gt;  8 -0.262   1.35   ABT   \n#&gt;  9  0.0598  1.63   ACN   \n#&gt; 10  0.570   3.43   ADBE  \n#&gt; # ℹ 492 more rows\n\n\nNow, the first 10 KMeans items are to be selected as the ScreePlot flattens beyond this one.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  pull(k_means) %&gt;%\n  pluck(10)\n\nNext, the clusters from the k_means_obj with the umap_results_tbl are being combined.\n\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\nprint(umap_kmeans_results_tbl)\n\n#&gt; # A tibble: 502 × 6\n#&gt;    symbol .cluster      V1      V2 company                       sector         \n#&gt;    &lt;chr&gt;  &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                         &lt;chr&gt;          \n#&gt;  1 A      7        -0.764   1.65   Agilent Technologies Inc.     Health Care    \n#&gt;  2 AAL    2        -2.70    0.455  American Airlines Group Inc.  Industrials    \n#&gt;  3 AAP    10        0.739  -0.0320 Advance Auto Parts Inc.       Consumer Discr…\n#&gt;  4 AAPL   9         0.0130  3.09   Apple Inc.                    Information Te…\n#&gt;  5 ABBV   7        -0.965  -0.0193 AbbVie Inc.                   Health Care    \n#&gt;  6 ABC    5        -0.506  -0.659  AmerisourceBergen Corporation Health Care    \n#&gt;  7 ABMD   9         0.436   3.10   ABIOMED Inc.                  Health Care    \n#&gt;  8 ABT    7        -0.262   1.35   Abbott Laboratories           Health Care    \n#&gt;  9 ACN    7         0.0598  1.63   Accenture Plc Class A         Information Te…\n#&gt; 10 ADBE   9         0.570   3.43   Adobe Inc.                    Information Te…\n#&gt; # ℹ 492 more rows\n\n\nAnd finally plotting the K-Means and UMAP results.\n\n# Visualize the combined K-Means and UMAP results\nlibrary(viridis)\n\n#&gt; Loading required package: viridisLite\n\numap_kmeans_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = viridis_pal()(10))"
  },
  {
    "objectID": "content/01_journal/03_automated_ml_h20_1.html",
    "href": "content/01_journal/03_automated_ml_h20_1.html",
    "title": "03 Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "Load the absolute path to the data directory.\n\ndata_dir &lt;- params$data_dir\n\n\n1 Libraries\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n\n2 Load Data Definitions\n\ndefinitions_raw_tbl   &lt;- read_excel(file.path(data_dir, \"data_definitions.xlsx\"), sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\ndefinitions_raw_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 35 × 2\n#&gt;    ...1                    ...2             \n#&gt;    &lt;chr&gt;                   &lt;chr&gt;            \n#&gt;  1 Education               1 'Below College'\n#&gt;  2 &lt;NA&gt;                    2 'College'      \n#&gt;  3 &lt;NA&gt;                    3 'Bachelor'     \n#&gt;  4 &lt;NA&gt;                    4 'Master'       \n#&gt;  5 &lt;NA&gt;                    5 'Doctor'       \n#&gt;  6 &lt;NA&gt;                    &lt;NA&gt;             \n#&gt;  7 EnvironmentSatisfaction 1 'Low'          \n#&gt;  8 &lt;NA&gt;                    2 'Medium'       \n#&gt;  9 &lt;NA&gt;                    3 'High'         \n#&gt; 10 &lt;NA&gt;                    4 'Very High'    \n#&gt; # ℹ 25 more rows\n\n\n\n3 Load Employee Attrition\n\nemployee_attrition_tbl &lt;- read_csv(file.path(data_dir, \"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\"))\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nemployee_attrition_tbl |&gt; as_tibble() |&gt; print()\n\n#&gt; # A tibble: 1,470 × 35\n#&gt;      Age Attrition BusinessTravel    DailyRate Department       DistanceFromHome\n#&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;\n#&gt;  1    41 Yes       Travel_Rarely          1102 Sales                           1\n#&gt;  2    49 No        Travel_Frequently       279 Research & Deve…                8\n#&gt;  3    37 Yes       Travel_Rarely          1373 Research & Deve…                2\n#&gt;  4    33 No        Travel_Frequently      1392 Research & Deve…                3\n#&gt;  5    27 No        Travel_Rarely           591 Research & Deve…                2\n#&gt;  6    32 No        Travel_Frequently      1005 Research & Deve…                2\n#&gt;  7    59 No        Travel_Rarely          1324 Research & Deve…                3\n#&gt;  8    30 No        Travel_Rarely          1358 Research & Deve…               24\n#&gt;  9    38 No        Travel_Frequently       216 Research & Deve…               23\n#&gt; 10    36 No        Travel_Rarely          1299 Research & Deve…               27\n#&gt; # ℹ 1,460 more rows\n#&gt; # ℹ 29 more variables: Education &lt;dbl&gt;, EducationField &lt;chr&gt;,\n#&gt; #   EmployeeCount &lt;dbl&gt;, EmployeeNumber &lt;dbl&gt;, EnvironmentSatisfaction &lt;dbl&gt;,\n#&gt; #   Gender &lt;chr&gt;, HourlyRate &lt;dbl&gt;, JobInvolvement &lt;dbl&gt;, JobLevel &lt;dbl&gt;,\n#&gt; #   JobRole &lt;chr&gt;, JobSatisfaction &lt;dbl&gt;, MaritalStatus &lt;chr&gt;,\n#&gt; #   MonthlyIncome &lt;dbl&gt;, MonthlyRate &lt;dbl&gt;, NumCompaniesWorked &lt;dbl&gt;,\n#&gt; #   Over18 &lt;chr&gt;, OverTime &lt;chr&gt;, PercentSalaryHike &lt;dbl&gt;, …\n\n\n\n4 Create Visualization Method\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr &lt;- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g &lt;- data %&gt;%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name &lt;- quo_name(color_expr)\n        \n        g &lt;- data %&gt;%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\n\n5 Visualize Feature Groups\n\n# Descriptive Features\nemployee_attrition_tbl %&gt;% \n  select(Attrition, Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n# Employment Features\nemployee_attrition_tbl %&gt;% \n  select(Attrition, Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning in cor(x, y): the standard deviation is zero\n\n\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %&gt;% \n  select(Attrition, MonthlyIncome, PercentSalaryHike, StockOptionLevel) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n# Survery Results\nemployee_attrition_tbl %&gt;% \n  select(Attrition, EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n# Performance Data\nemployee_attrition_tbl %&gt;% \n  select(Attrition, JobInvolvement, PerformanceRating) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %&gt;% \n  select(Attrition, BusinessTravel, OverTime) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n# Training & Education\nemployee_attrition_tbl %&gt;% \n  select(Attrition, Education, EducationField, TrainingTimesLastYear) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %&gt;% \n  select(Attrition, TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n6 Challenge Solutions\nThe challenge question are solved based on the graphs plotted above for the feature groups.\n1. Compensation Features\nWhat can you deduce about the interaction between Monthly Income and Attrition?Solution: c. Those that are leaving have a lower Monthly Income.\n2. Compensation Features\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?Solution: c. Those that are leaving have lower Percent Salary HikeNote: However, it must be noted this distinction is not super clear as for both attrition options “yes” and “no” the mean percent salary hike is the same. Only the max value of the percent salary hike is bigger for “yes”. That’s why I decide for c).\n3. Compensation Features\nWhat can you deduce about the interaction between Stock Option Level and Attrition?Solution: b. Those that are staying have a higher stock option level.\n4. Survey Results\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?Solution: A higher proportion of those leaving have a low environment satisfaction level.\n5. Survey Results\nWhat can you deduce about the interaction between Work Life Balance and AttritionSolution: b. Those that are staying have a higher density of 2’s and 3’s.\n6. Performance Data\nWhat Can you deduce about the interaction between Job Involvement and Attrition?Solution: a. Those that are leaving have a lower density of 3’s and 4’s.\n7. Work-Life Features\nWhat can you deduce about the interaction between Over Time and Attrition?Solution: b. The proportion of those staying that are working Over Time are high compared to those that are not staying.\n8. Training and Education\nWhat can you deduce about the interaction between Training Times Last Year and AttritionSolution: b. People that leave tend to have less annual trainings.\n9. Time-Based Features\nWhat can you deduce about the interaction between Years At Company and AttritionSolution: b. People that leave tend to have less working years at the company.\n10. Time-Based Features\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?Solution: a. Those that are leaving have more years since last promotion than those that are staying."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html",
    "href": "content/01_journal/05_performance_measures.html",
    "title": "05 Performance Measures",
    "section": "",
    "text": "1 Libraries\n\nlibrary(cowplot)\nlibrary(glue)\n\n\n2 Source Automated ML h2O Code\n\nsource(\"04_automated_ml_h2o_2.R\")\n\n\n3 1. Leaderboard Visualization\nVisualize the leaderboard to see how different models perform according to the logloss and auc performance metrics.\n\n# Transform AutoML leaderboard\nautoml_models_h2o@leaderboard %&gt;% \n  as_tibble() %&gt;% \n  select(-c(mean_per_class_error, rmse, mse))\n\n# Method for plotting h2O leaderboard\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  # Setup inputs\n  # adjust input so that all formats are working\n  order_by &lt;- tolower(order_by[[1]])\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n    rownames_to_column(var = \"rowname\") %&gt;%\n    mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g &lt;- data_transformed_tbl %&gt;%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\n\n# Plot leaderboard\nplot_h2o_leaderboard(automl_models_h2o@leaderboard, order_by = \"auc\")\n\n\n\nLeaderboard Visualization\n\n\n4 2. Model Hyperparameter Tuning with Grid Search\nML models have hyperparameter which can be further tuned to improve the ML model performance. For a stacked ensemble model this may be for example the number of trees and max_depth of the trees. Grid search is one potential way to determine the best performing set of hyperparameters. Thus, grid search is applied below for the best performing model with default hyperparameters.\n\nmodel &lt;- automl_models_h2o@leader\nmodel\n\nh2o.performance(model, newdata = test_h2o)\n\nhyper_params = list(\n  ntrees = c(7,8,9,10,11,12),\n  max_depth = c(4,8,12,16, 18, 20)\n)\n\ngrid = h2o.grid(\n  algorithm = \"gbm\",\n  grid_id = \"grid\",\n  x = x,\n  y = y,\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = hyper_params\n)\ngrid\n\nbest_model &lt;- h2o.getModel(\"grid_model_26\")\nbest_model %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\nh2o.getGrid(grid_id = \"grid\", sort_by = \"auc\", decreasing = TRUE)\n\n\n5 3. Visualization of Trade-off between Precision, Recall and Optimal Threshold\nHere the trade-off between the precision and the recall metric is visualized. As well as the optimal threshold between precision and recall is highlighted in the same figure.\n\nperformance_h2o &lt;- h2o.performance(best_model, newdata = test_h2o)\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as_tibble() \n\nperformance_tbl %&gt;% glimpse()\n\nh2o.auc(performance_h2o, train = T, valid = T, xval = T)\n\nh2o.auc(best_model, train = T, valid = T, xval = T)\n\nh2o.giniCoef(performance_h2o)\nh2o.logloss(performance_h2o)\n\n# result for the training data\nh2o.confusionMatrix(best_model)\n\n# result for the hold out set\nh2o.confusionMatrix(performance_h2o)\n\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),,\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n\nperformance_tbl %&gt;%\n  filter(f1 == max(f1))\n\nperformance_tbl %&gt;%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(\n    xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")\n  ) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n\n\nTrade-off Precision-Recall\n\n\n6 4. ROC Plot\nHere the ROC plot is visualized and plotted. The ROC plot is a graphical representation used to evalute the performance of a binary classification model. It illustrates the trade-offs between the true positive rate (TPR) and the false positive rate (FPR).\n\npath &lt;- \"models/StackedEnsemble_AllModels_1_AutoML_1_20240612_120110\"\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n  \n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = test_h2o) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc)\n  \n}\n\nfs::dir_info(path = models_dir)\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = models_dir) %&gt;%\n  select(path) %&gt;%\n  mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n  unnest(cols = metrics)\n\nmodel_metrics_tbl\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    # Extract the model names\n    path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\nROC Plot\n\n\n7 5. Precision vs Recall Plot\nThis plot displays the precision against the recall. The recall is being displayed on the x-axis and the precision on the y-axis.\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n  \n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc, precision, recall)\n  \n}\n\nfs::dir_info(path = models_dir)\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = models_dir) %&gt;%\n  select(path) %&gt;%\n  mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n  unnest(cols = metrics)\nmodel_metrics_tbl\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(recall, precision, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\nPrecision vs. Recall\n\n\n8 6. Gain Plot\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n  h2o.gainsLift() %&gt;%\n  as.tibble()\n\n## Gain Chart\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"lift\")) %&gt;%\n  mutate(baseline = cumulative_data_fraction) %&gt;%\n  rename(gain     = cumulative_capture_rate) %&gt;%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\n\n\nGain Plot\n\n\n9 7. Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"capture\")) %&gt;%\n  mutate(baseline = 1) %&gt;%\n  rename(lift = cumulative_lift) %&gt;%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\n\n\nLift Plot\n\n\n10 8. Dashboard with cowplot\n\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nnewdata &lt;- test_tbl\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(1:max_models)\n  \n  newdata_tbl &lt;- newdata %&gt;%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      &lt;- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr &lt;- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %&gt;%\n      h2o.metric() %&gt;%\n      as.tibble() %&gt;%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  # 1A. ROC Plot\n  \n  p1 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  # 1B. Precision vs Recall\n  \n  p2 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n      h2o.gainsLift() %&gt;%\n      as.tibble() %&gt;%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    ) %&gt;%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # cowplot::get_legend extracts a legend from a ggplot object\n  p_legend &lt;- get_legend(p1)\n  # Remove legend from p1\n  p1 &lt;- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title &lt;- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle &lt;- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n  \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n  plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                       size = 0.5, max_models = 4)\n\n\n\nCombined Plots\n\n\n\n\nLeaderboard Visualization\nTrade-off Precision-Recall\nROC Plot\nPrecision vs. Recall\nGain Plot\nLift Plot\nCombined Plots"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html",
    "href": "data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  }
]